{"version":3,"sources":["components/tableComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableComponent","props","addCol","cols","state","push","length","setState","delColRef","current","style","display","addRow","rows","delRowRef","delCol","currentCol","splice","delRow","currentRow","showBtns","hideBtns","delButtonMover","event","target","classList","contains","dataset","colIndex","parentNode","rowIndex","containerMover","container","containerRef","mousePosition","clientX","clientY","left","top","containerAddListener","containerTableRect","currentTarget","getBoundingClientRect","eventRect","nativeEvent","offsetX","offsetY","window","addEventListener","containerRemoveListener","removeEventListener","React","createRef","i","initialHeight","initialWidth","cellSize","this","className","ref","onMouseEnter","onMouseLeave","onMouseMove","onMouseDown","onMouseUp","map","row","index","key","data-row-index","col","width","height","data-col-index","onClick","right","bottom","transform","Component","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad64af49.chunk.js","sourcesContent":["import React from 'react';\r\nimport './tableComponent.css';\r\n\r\nclass TableComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentCol: 0,\r\n      currentRow: 0,\r\n      cols: [],\r\n      rows: [],\r\n    }\r\n\r\n    this.containerRef = React.createRef();\r\n    this.delColRef = React.createRef();\r\n    this.delRowRef = React.createRef();\r\n\r\n    for (let i = 0; i < this.props.initialHeight; i++) {\r\n      this.state.rows.push(i);\r\n    }\r\n    for (let i = 0; i < this.props.initialWidth; i++) {\r\n      this.state.cols.push(i);\r\n    }\r\n  }\r\n\r\n  addCol = () => {\r\n    let {cols} = this.state;\r\n    cols.push(cols[cols.length - 1] + 1);\r\n    this.setState(cols);\r\n\r\n    if (cols.length === 2) {\r\n      this.delColRef.current.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  addRow = () => {\r\n    let {rows} = this.state;\r\n    rows.push(rows[this.state.rows.length - 1] + 1);\r\n    this.setState(rows);\r\n\r\n    if (rows.length === 2) {\r\n      this.delRowRef.current.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  delCol = () => {\r\n    let {cols, currentCol} = this.state;\r\n    this.setState(cols.splice(currentCol, 1));\r\n  \r\n    if (cols.length === 1) {\r\n      this.delColRef.current.style.display = 'none';\r\n    }\r\n    \r\n    if (currentCol === cols.length) {\r\n      this.setState({ currentCol: currentCol - 1 });\r\n    }\r\n  }\r\n\r\n  delRow = () => {\r\n    let {rows, currentRow} = this.state;\r\n    this.setState(rows.splice(currentRow, 1));\r\n\r\n    if (rows.length === 1) {\r\n      this.delRowRef.current.style.display = 'none';\r\n    }\r\n    \r\n    if (currentRow === rows.length) {\r\n      this.setState({ currentRow: currentRow - 1 });\r\n    }\r\n  }\r\n\r\n  showBtns = () => {\r\n    let {rows, cols} = this.state;\r\n    if (cols.length > 1) {\r\n      this.delColRef.current.style.display = 'block';\r\n    }\r\n\r\n    if (rows.length > 1) {\r\n      this.delRowRef.current.style.display = 'block';\r\n    }\r\n  };\r\n\r\n  hideBtns = () => {\r\n    this.delRowRef.current.style.display = 'none';\r\n    this.delColRef.current.style.display = 'none';\r\n  }\r\n\r\n  delButtonMover = (event) => {\r\n    if (event.target.classList.contains('col')) {\r\n      if (+event.target.dataset.colIndex !== this.state.currentCol) {\r\n        this.setState({currentCol: +event.target.dataset.colIndex});\r\n      }\r\n      if (+event.target.parentNode.dataset.rowIndex !== this.state.currentRow) {\r\n        this.setState({currentRow: +event.target.parentNode.dataset.rowIndex});\r\n      }\r\n    }\r\n  }\r\n\r\n  containerMover = (event) => {\r\n    const container = this.containerRef.current;\r\n    const mousePosition = {\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    }\r\n    container.style.left = `${mousePosition.x + this.state.left}px`;\r\n    container.style.top = `${mousePosition.y + this.state.top}px`;\r\n  }\r\n  \r\n  containerAddListener = (event) => {\r\n    const containerTableRect = event.currentTarget.getBoundingClientRect();\r\n    const eventRect = event.target.getBoundingClientRect();\r\n\r\n    this.setState({\r\n      left: containerTableRect.left - eventRect.left - event.nativeEvent.offsetX,\r\n      top: containerTableRect.top - eventRect.top - event.nativeEvent.offsetY\r\n    })\r\n    window.addEventListener('mousemove', this.containerMover);\r\n  }\r\n\r\n  containerRemoveListener = () => {\r\n    window.removeEventListener('mousemove', this.containerMover);\r\n  }\r\n\r\n  render() {\r\n    let {cellSize} = this.props;\r\n    let {currentRow, currentCol, rows, cols} = this.state;\r\n    return (\r\n      <div \r\n        className='container-table'\r\n        ref={this.containerRef}\r\n        onMouseEnter={this.showBtns}\r\n        onMouseLeave={this.hideBtns}\r\n      >\r\n        <div \r\n          className='boxes-container'\r\n          onMouseMove={this.delButtonMover}\r\n          onMouseDown={this.containerAddListener}\r\n          onMouseUp={this.containerRemoveListener}\r\n        >\r\n          {rows.map((row, index) => (\r\n            <div className='row' key={row} data-row-index={index}>{\r\n              cols.map((col, index) => (\r\n                <div className='col'\r\n                  style={{\r\n                    width: cellSize,\r\n                    height: cellSize\r\n                  }}\r\n                  key={col}\r\n                  data-col-index={index}\r\n                />\r\n              ))}</div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className='add-btns-container'>\r\n          <button className='add add-col'\r\n            onClick={this.addCol}\r\n            style={{\r\n              width: cellSize + 2,\r\n              height: cellSize + 2,\r\n              right: -(cellSize + 3)\r\n            }}\r\n          >\r\n            +\r\n          </button>\r\n          <button className='add add-row'\r\n            onClick={this.addRow}\r\n            style={{\r\n              width: cellSize + 2,\r\n              height: cellSize + 2,\r\n              bottom: -(cellSize + 3)\r\n            }}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className='delete-btns-container' style={{ top: -cellSize, left: -cellSize}}>\r\n          <button \r\n            className='delete del-col'\r\n            ref={this.delColRef}\r\n            onClick={this.delCol}\r\n            style={{\r\n              transform: (currentCol === cols.length\r\n                ? `translateX(${(currentCol - 1) * cellSize + 2}px)`\r\n                : `translateX(${currentCol * (cellSize + 2) + 1}px)`),\r\n              width: cellSize + 2,\r\n              height: cellSize + 2,\r\n              left: cellSize\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n          <button className='delete del-row'\r\n            onClick={this.delRow}\r\n            ref={this.delRowRef}\r\n            style={{\r\n              transform: (currentRow === rows.length\r\n                ? `translateY(${(currentRow - 1) * cellSize + 2}px)`\r\n                : `translateY(${currentRow * (cellSize + 2) + 1}px)`),\r\n              width: cellSize + 2,\r\n              height: cellSize + 2,\r\n              top: cellSize\r\n            }}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTableComponent.defaultProps = { initialWidth: 4, initialHeight: 4, cellSize: 50 };\r\n\r\nexport default TableComponent;","import React from 'react';\nimport TableComponent from './components/tableComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <TableComponent initialWidth={4} initialHeight={4} cellSize={50}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}